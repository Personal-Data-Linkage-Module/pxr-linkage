version: 0.2

env:
  variables:
    APP_NAME:             link-ctoken-batch
    APP_VERSION:          1.0.0
phases:
  install:
    runtime-versions:
       nodejs: 12
  pre_build:
    commands:
      ## SonarQube対応
      # SonarQube CLIのインストール
      - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.0.0.1744-linux.zip
      - unzip sonar-scanner-cli-4.0.0.1744-linux.zip -d /tmp/.build
      - export PATH=$PATH:/tmp/.build/sonar-scanner-4.0.0.1744-linux/bin 
      - keytool -import -file ca.crt -noprompt -keystore /tmp/.build/sonar-scanner-4.0.0.1744-linux/jre/lib/security/cacerts -storepass changeit

      # Node.jsのヒープ領域を拡大
      - export NODE_OPTIONS="--max-old-space-size=2048"
      # ロケールをja_JPに設定
      - echo set locale...
      - yum install -y glibc-langpack-ja
      - export LC_ALL="ja_JP.utf8"
      - echo Start to install necessary components in pre_build phase ...
      - npm ci
  build:
    commands:
      ## CodeBuild環境内でコンテナで起動したテストDBを使用した単体テストの実行サンプル
      - echo Start Test DB...
      # テスト用PostgreSQLコンテナ作成用DDL
      #- mkdir initdb
      #- cp ddl/createDB.sql initdb/0_createDB.sql
      #- cp ddl/createTable.sql initdb/1_createTable.sql
      #- cp ddl/testData.sql  initdb/2_testData.sql
      # テスト用PostgreSQLを起動
      #- docker run -d --name external-db-service -p 5432:5432 -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=pxr_pod -v $CODEBUILD_SRC_DIR/initdb:/docker-entrypoint-initdb.d postgres
      # CodeBuild環境内で接続可能にするために設定を一時的に修正（external-db-service → localhost）
      #- sed -i.org -e 's/external-db-service/localhost/g' config/ormconfig.json
      #- cat config/ormconfig.json
      # PostgreSQLコンテナの起動処理を待ち受け
      #- sleep 5
      # テストを実行
      #- echo Unit-Test started on 'date'...
      #- npm run test:unit
      # テスト完了後に設定を戻す
      #- rm config/ormconfig.json
      #- cp config/ormconfig.json.org config/ormconfig.json
      #- cat config/ormconfig.json

      ## SonarQube静的解析
      #- sonar-scanner -Dsonar.login=d33ea6c15103f0c8b4d4ba4a1c4b649e134d1053 -Dsonar.host.url=https://ip-172-16-2-173.ap-northeast-1.compute.internal/ip-172-16-2-173/sonar/

      ## アプリケーションのビルドを実行
      #- echo Build started on `date` ...
      - npm build
  post_build:
    commands:
      - echo Build completed on `date` ...
      - echo Archive Artifact...
      # 開発用モジュールを除去
      - npm prune --production
      # 実行時に必要なファイルのみをアーカイブ(ソースコード、テストレポートなどを除外)
      - mkdir -p target
      - tar zcvf target/$APP_NAME-$APP_VERSION.tgz . --exclude "./target" --exclude "./coverage" --exclude "./logs" --exclude "./src" --exclude "./.gitignore" --exclude "./.git" --exclude "./.vscode" --exclude "./npm-debug.log*" --exclude "./sonar-project.properties" --exclude "./tsconfig.json" --exclude "./tslint.json" --exclude "./*-xunit.xml" --exclude "./buildspec.yml" --exclude "./Dockerfile" --exclude "./jest.setup.js" --exclude "./jest.unit.config.js" --exclude "./.dockerignore" --exclude "./.eslintrc.json" --exclude "./.scannerwork" --exclude "./ca.crt" --exclude "./sonar-scanner-cli-4.0.0.1744-linux.zip" --exclude "./coverage-unit"

artifacts:
  files:
    - target/**/*.tgz
